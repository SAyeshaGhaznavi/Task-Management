{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/task-management/my-app/src/app/dashboard/invites/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useAuth } from '../../../../context/authContext';\r\nimport apiClient from '@/app/lib/api';\r\n\r\ninterface InvitedMember {\r\n  invited_id: number;\r\n  invited_by_id: number;\r\n  status: string;\r\n  user_email: string;\r\n}\r\n\r\ninterface User {\r\n  user_id: number;\r\n  user_name: string;\r\n  password: string;\r\n  phone?: string;\r\n  email: string;\r\n  createdAt?: string;\r\n}\r\n\r\nconst STATUS_CYCLE = ['Pending', 'Accepted', 'Rejected'];\r\n\r\nexport default function InvitationsPage() {\r\n  const { user } = useAuth();\r\n  const [invitations, setInvitations] = useState<InvitedMember[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [invitee, setInvitee]=useState<string|null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchInvitations = async () => {\r\n      try {\r\n        const data = await apiClient.get(`/invited-member/${user?.user_id}`);\r\n        //console.log( \"data: \" ,data);\r\n        setInvitations([data]);\r\n        //console.log(\"iniheihw: \", invitations);\r\n        //const invitee_user=await apiClient.get(`/users/${}`);\r\n        //console.log(\"ijnkj: \", data.invited_by_id);\r\n        const invitedby:User = await apiClient.get(`/users/${data.invited_by_id}`);\r\n        //console.log(\"iooiwjq: \", invitedby);\r\n        setInvitee(invitedby.email)\r\n        //console.log(\"082901: \", invitee);\r\n      } catch (err) {\r\n        console.error(err);\r\n        setError('Failed to load invitations');\r\n      }\r\n    };\r\n\r\n    if (user?.user_id) fetchInvitations();\r\n  }, [user?.user_id]);\r\n\r\n  const cycleStatus = async (invite: InvitedMember) => {\r\n    const currentIndex = STATUS_CYCLE.indexOf(invite.status || 'Pending');\r\n    const nextStatus = STATUS_CYCLE[(currentIndex + 1) % STATUS_CYCLE.length];\r\n\r\n    try {\r\n      await apiClient.patch(`/invited-member/${invite.invited_id}`, {\r\n        status: nextStatus,\r\n      });\r\n\r\n      setInvitations((prev) =>\r\n        prev.map((t) =>\r\n          t.invited_id === invite.invited_id ? { ...t, status: nextStatus } : t\r\n        )\r\n      );\r\n    } catch (err) {\r\n      console.error('Failed to update status');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h2 className=\"text-2xl font-semibold mb-4\">Your Invitations</h2>\r\n\r\n      {error && <p className=\"text-red-500\">{error}</p>}\r\n\r\n      {invitations.length === 0 && !error ? (\r\n        <p className=\"text-gray-600\">You have no pending invitations.</p>\r\n      ) : (\r\n        <ul className=\"space-y-4\">\r\n          {invitations.map((invite) => (\r\n            <li\r\n              key={invite.invited_id}\r\n              className=\"border p-4 rounded-lg shadow-sm bg-white hover:shadow-md transition\"\r\n            >\r\n              \r\n              <h3 className=\"text-lg font-medium text-blue-700\">Invited by</h3> \r\n              {/* <p className=\"text-sm text-gray-600\">User ID {invite.invited_by_id}</p> */}\r\n              <p className=\"text-sm text-gray-600\">User email: {invitee}</p>\r\n              \r\n                    <button\r\n                onClick={() => cycleStatus(invite)}\r\n                className=\"mt-2 px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600\"\r\n              >\r\n                Status: {invite.status || 'Pending'}\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAsBA,MAAM,eAAe;IAAC;IAAW;IAAY;CAAW;AAEzC,SAAS;IACtB,MAAM,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,uHAAA,CAAA,UAAO,AAAD;IACvB,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAmB,EAAE;IAClE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,SAAS,WAAW,GAAC,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAElD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,mBAAmB;YACvB,IAAI;gBACF,MAAM,OAAO,MAAM,wHAAA,CAAA,UAAS,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,MAAM,SAAS;gBACnE,+BAA+B;gBAC/B,eAAe;oBAAC;iBAAK;gBACrB,yCAAyC;gBACzC,uDAAuD;gBACvD,6CAA6C;gBAC7C,MAAM,YAAiB,MAAM,wHAAA,CAAA,UAAS,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,aAAa,EAAE;gBACzE,sCAAsC;gBACtC,WAAW,UAAU,KAAK;YAC1B,mCAAmC;YACrC,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC;gBACd,SAAS;YACX;QACF;QAEA,IAAI,MAAM,SAAS;IACrB,GAAG;QAAC,MAAM;KAAQ;IAElB,MAAM,cAAc,OAAO;QACzB,MAAM,eAAe,aAAa,OAAO,CAAC,OAAO,MAAM,IAAI;QAC3D,MAAM,aAAa,YAAY,CAAC,CAAC,eAAe,CAAC,IAAI,aAAa,MAAM,CAAC;QAEzE,IAAI;YACF,MAAM,wHAAA,CAAA,UAAS,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,OAAO,UAAU,EAAE,EAAE;gBAC5D,QAAQ;YACV;YAEA,eAAe,CAAC,OACd,KAAK,GAAG,CAAC,CAAC,IACR,EAAE,UAAU,KAAK,OAAO,UAAU,GAAG;wBAAE,GAAG,CAAC;wBAAE,QAAQ;oBAAW,IAAI;QAG1E,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC;QAChB;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAA8B;;;;;;YAE3C,uBAAS,8OAAC;gBAAE,WAAU;0BAAgB;;;;;;YAEtC,YAAY,MAAM,KAAK,KAAK,CAAC,sBAC5B,8OAAC;gBAAE,WAAU;0BAAgB;;;;;qCAE7B,8OAAC;gBAAG,WAAU;0BACX,YAAY,GAAG,CAAC,CAAC,uBAChB,8OAAC;wBAEC,WAAU;;0CAGV,8OAAC;gCAAG,WAAU;0CAAoC;;;;;;0CAElD,8OAAC;gCAAE,WAAU;;oCAAwB;oCAAa;;;;;;;0CAE5C,8OAAC;gCACL,SAAS,IAAM,YAAY;gCAC3B,WAAU;;oCACX;oCACU,OAAO,MAAM,IAAI;;;;;;;;uBAZvB,OAAO,UAAU;;;;;;;;;;;;;;;;AAoBpC","debugId":null}}]
}